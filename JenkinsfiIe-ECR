@Library('my-shared-lib') _
pipeline {
    agent any
    parameters {
        choice(name: 'action', choices: 'create\ndelete', description: 'Choose create/destroy')
        string(name: 'aws_account_id', description: 'AWS Account ID', defaultValue: '211125400428')
        string(name: 'region', description: 'ECR Region', defaultValue: 'us-east-1')
        string(name: 'ecr_repoName', description: 'Name of the ECR', defaultValue: 'springbootmaven')
        string(name: 'cluster', description: 'Name of the EKS cluster', defaultValue: 'my-eks-cluster')
    }

    environment {
        KUBECTL_VERSION = "v1.28.0" // specify the version or use 'stable.txt' to get the latest stable version
    }

    stages {
        stage('Checkout') {
            when { expression { params.action == 'create' } }
            steps {
                gitCheckout(
                    branch: "master",
                    url: "https://github.com/prafullb007/JAVA-MAVEN-WEB-APP.git"
                )
            }
        }

        stage('Docker Image Build: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerBuild("${params.aws_account_id}", "${params.region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Docker Image Scan: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerImageScan("${params.aws_account_id}", "${params.region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Docker Image Push: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerImagePush("${params.aws_account_id}", "${params.region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Docker Image cleanUp: ECR') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dockerImageCleanup("${params.aws_account_id}", "${params.region}", "${params.ecr_repoName}")
                }
            }
        }

        stage('Create EKS Cluster: EKS') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    dir('tearrformclusteraws') {
                        sh """
                            terraform init -upgrade
                            terraform refresh
                            terraform plan
                            terraform state list
                            # terraform apply -auto-approve
                        """
                    }
                }
            }
        }

        stage('Deployment on EKS Cluster') {
            when { expression { params.action == 'create' } }
            steps {
                script {
                    def apply = false
                    try {
                        input message: 'Please confirm to deploy on EKS', ok: 'Ready to apply the config?'
                        apply = true
                    } catch (err) {
                        apply = false
                        currentBuild.result = 'UNSTABLE'
                    }
                    if (apply) {
                        sh """
                            aws eks update --region ${params.region} update-kubeconfig --name ${params.cluster}
                            curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                            chmod +x kubectl
                            sudo mv kubectl /usr/local/bin/
                            kubectl apply -f .
                        """
                    }
                }
            }
        }
    }
}
