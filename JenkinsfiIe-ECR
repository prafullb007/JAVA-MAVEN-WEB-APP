@Library('my-shared-lib') _
pipeline {
    agent any
    parameters{
        choice(name: 'action', choices: 'create\ndelete', description: 'choose create/Destroy' ) 
        string(name: 'aws_account_id', description: 'aws account id', defaultValue: '211125400428')
        string(name: 'region', description: 'ECR Region', defaultValue: 'us-east-1')
        string(name: 'ecr_repoName', description: 'name of the ECR', defaultValue: 'springbootmaven')
        }


    stages {
        stage('Checkout') {
            when {expression { params.action=='create'}}
            steps {
                gitCheckout(
                    branch: "master",
                    url: "https://github.com/prafullb007/JAVA-MAVEN-WEB-APP.git"
                )
            }
        }
        stage('Unit Testing') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    mvnTest()
                }
                
            }
        }
        
        stage('Maven Integration') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    mvnintegrationTest()
                }
                
            }    
        }
        // stage('Static Code Analysis: Sonaqube') {
        //     when {expression { params.action=='create'}}
        //     steps {
        //         script{
        //             def sonarqubecredentialsId='sonarcube-api'
        //             statiCodeAnalysis(sonarqubecredentialsId)
        //         }
                
        //     }    
        // }
        // stage('Quality Gates Status Check: Sonaqube') {
        //     when {expression { params.action=='create'}}
        //     steps {
        //         script{
        //             def sonarqubecredentialsId='sonarcube-api'
        //             QualityGateStatus(sonarqubecredentialsId)
        //         }
                
        //     }    
        // }
        stage('Maven Build : Maven') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    mvnBuild()
                }
                
            }
        }
        stage('Docker Image Build: ECR') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    dockerBuild("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
                
            }
        }
        stage('Docker Image Scan: ECR') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    dockerImageScan("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
                
            }
        }
        stage('Docker Image Push: ECR') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    dockerImagePush("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
                
            }
        }
        stage('Docker Image cleanUp: ECR') {
            when {expression { params.action=='create'}}
            steps {
                script{
                    dockerImagePush("${params.aws_account_id}","${params.region}","${params.ecr_repoName}")
                }
                
            }
        }

    }
}
